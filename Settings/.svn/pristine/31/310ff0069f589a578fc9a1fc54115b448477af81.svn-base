
package com.ctv.settings.network.activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.KeyEvent;
import com.ctv.settings.network.Listener.ConnectivityListener;
import com.ctv.settings.network.Listener.LoadDataAsyncTask;
import com.ctv.settings.network.R;
import com.ctv.settings.network.holder.*;
import com.ctv.settings.network.utils.InitDataInfo;
import com.ctv.settings.utils.L;

/**
 * 网络模块
 * @author xuzemin
 * @date 2019/09/19
 */
public class NetWorkAcitivy extends AppCompatActivity implements ConnectivityListener.Listener {
    private BluetoothViewHolder mBluetoothHolder;

    private NetstateViewHolder mNetstateViewHolder;

    private ConnectivityListener mConnectivityListener = null;

    private WireViewHolder wireViewHolder;

    private WifiHotspotViewHolder wifiHotspotViewHolder;

    private WirelessViewHolder wirelessViewHolder;

    private ScreenHotSponViewHolder screenHotSponViewHolder;

    boolean isFromSetting = false, isFromGuide = false;

    private int currentTag;

    private InitDataInfo mInitDataInfo = null;

    private LoadDataAsyncTask mAyncTask = null;

    static final int ETHER_TAG = 1;

    static final int WIFI_TAG = 2;

    static final int PPPOE_TAG = 3;

    static final int BLUETOOTH_TAG = 4;

    static final int DISPLAY_TAG = 5;

    static final int HOST_TAG = 6;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        currentTag = 4;

//        Intent getIntent = getIntent();
//        currentTag = getIntent.getIntExtra("CurrentTag",0);

        if(currentTag != 0) {
            switch (currentTag) {
                case ETHER_TAG:
                    setContentView(R.layout.page_wireless);
                    mConnectivityListener = new ConnectivityListener(this, this);
                    wirelessViewHolder = new WirelessViewHolder(this,mConnectivityListener);
                    break;
                case BLUETOOTH_TAG:
                    setContentView(R.layout.page_bluetooth);
                    mBluetoothHolder = new BluetoothViewHolder(this);
                    break;
            }
        }

    }


    @Override
    protected void onResume() {
        super.onResume();
        switch (currentTag){
            case ETHER_TAG:
                break;
            case BLUETOOTH_TAG:
                mBluetoothHolder.onResume();
                break;

        }

//        mAyncTask = new LoadDataAsyncTask(this, mConnectivityListener);
//        mAyncTask.setFinishListener(new LoadDataAsyncTask.DataFinishListener() {
//            public void dataFinishSuccessfully(InitDataInfo data) {
//                if (data == null) {
//                    data = new InitDataInfo(null, null, null, null, 0, false, null, false);
//                }
//                switch (currentTag){
//                    case BLUETOOTH_TAG:
//                        break;
//                }
//                mNetstateViewHolder.setData(data);
//                screenHotSponViewHolder.refreshWifiApUi(true, data);
//                wifiHotspotViewHolder.refreshWifiApUi(true, data);
//                wirelessViewHolder.initData(data);
//                wireViewHolder.initData(data);
//                mConnectivityListener.start();
//            }
//        });
//        mAyncTask.execute();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
//        mBluetoothHolder.onExit();
        switch (currentTag){
            case ETHER_TAG:
                break;
            case BLUETOOTH_TAG:
                mBluetoothHolder.onExit();
                break;

        }
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (isFromGuide) {
            switch (keyCode) {
                case KeyEvent.KEYCODE_NUMPAD_0:
                case KeyEvent.KEYCODE_NUMPAD_1:
                case KeyEvent.KEYCODE_NUMPAD_2:
                case KeyEvent.KEYCODE_NUMPAD_3:
                case KeyEvent.KEYCODE_NUMPAD_4:
                case KeyEvent.KEYCODE_NUMPAD_5:
                case KeyEvent.KEYCODE_NUMPAD_6:
                case KeyEvent.KEYCODE_NUMPAD_7:
                case KeyEvent.KEYCODE_NUMPAD_8:
                case KeyEvent.KEYCODE_NUMPAD_9:
                case KeyEvent.KEYCODE_DPAD_RIGHT:
                case KeyEvent.KEYCODE_DPAD_DOWN:
                case KeyEvent.KEYCODE_DPAD_LEFT:
                case KeyEvent.KEYCODE_DPAD_UP:
                case KeyEvent.KEYCODE_ENTER:
                case KeyEvent.KEYCODE_BACK:
                    break;
                default:
                    return true;
            }
        }
//        if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN || keyCode == KeyEvent.KEYCODE_DPAD_UP) {
//            netViewHolder.isUpDown = true;
//            if (netViewHolder.onKeyDown(keyCode, event)) {
//                return true;
//            }
//        } else {
//            netViewHolder.isUpDown = false;
//        }
        switch (currentTag){
            case BLUETOOTH_TAG:
                return mBluetoothHolder.onKeyDown(keyCode,event);
            case ETHER_TAG:
                return mNetstateViewHolder.onKeyDown(keyCode,event);
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onConnectivityChange(Intent intent) {
        if (intent != null) {
            refreshView(intent);
        }
    }

    @Override
    public void onPPPoeChanged(String status) {
        // TODO Auto-generated method stub
        L.d( "-------------onPPPoeChanged,pppoe status, " + status);
        mNetstateViewHolder.refreshPPPoEStatus(false);
        mNetstateViewHolder.refreshNetworkStatus();
        //  pppoeViewHolder.updatePppoeData(status);
    }

    @Override
    public void onEthernetAvailabilityChanged(boolean isAvailable) {
        // TODO Auto-generated method stub
        L.d( "-------------onEthernetAvailabilityChanged,isAvailable, " + isAvailable);
        mNetstateViewHolder.refreshNetworkStatus();
        wireViewHolder.showEthernetInfo(false);
    }



    public WifiHotspotViewHolder getWifiHotspotViewHolder() {
        return wifiHotspotViewHolder;
    }

    public WireViewHolder getWireViewHolder() {
        return wireViewHolder;
    }

    public WirelessViewHolder getWirelessViewHolder() {
        return wirelessViewHolder;
    }


    private void refreshView(Intent intent) {
//        String action = intent.getAction();
//        Log.d(TAG, "--action, " + action);
//        if (WifiManager.WIFI_STATE_CHANGED_ACTION.equals(action)) {
//            wirelessViewHolder.updateWifiState(intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE,
//                    WifiManager.WIFI_STATE_UNKNOWN));
//        } else if (WifiManager.NETWORK_STATE_CHANGED_ACTION.equals(action)) {
//            if ((!mConnectivityListener.getConnectivityStatus().isWifiConnected())
//                    && (!mConnectivityListener.isWifiEnabled())) {
//                netstateViewHolder.refreshNetworkStatus();
//                //pppoeViewHolder.refreshPPPoeConnectState();
//            } else {
//                netstateViewHolder.refreshWifiStatus(false);
//            }
//            if (wirelessViewHolder.isOpenWifi) {
//                wirelessViewHolder.stateChanged(intent);
//            }
//        } else if (WifiManager.WIFI_AP_STATE_CHANGED_ACTION.equals(action)) {
//            wifiHotspotViewHolder.upApStateChange(intent);
//            screenHotSponViewHolder.upApStateChange(intent);
//        } else if (MWifiManager.WIFI_DEVICE_ADDED_ACTION.equals(action)) {
//            netstateViewHolder.refreshNetworkStatus();
//            //  pppoeViewHolder.refreshPPPoeConnectState();
//        } else if (MWifiManager.WIFI_DEVICE_REMOVED_ACTION.equals(action)) {
//            if (WifiManager.WIFI_AP_STATE_ENABLED == mConnectivityListener.getWifiManager()
//                    .getWifiApConfiguration().status) {
//                if (!mConnectivityListener.getWifiManager().isWifiApEnabled()) {
//                    wifiHotspotViewHolder.isOpenHotspot = false;
//                    screenHotSponViewHolder.isOpenHotspot = false;
//                    screenHotSponViewHolder.setOpenHotspot(false);
//                    wifiHotspotViewHolder.setOpenHotspot(false);
//                }
//            }
//            if (!wirelessViewHolder.wifiManager.isWifiEnabled()) {
//                wirelessViewHolder.isOpenWifi = false;
//                wirelessViewHolder.setAndCheckWifiData(false);
//            }
//        } else if (ConnectivityManager.CONNECTIVITY_ACTION.equals(action)
//                || ConnectivityManager.INET_CONDITION_ACTION.equals(action)) {
//
//            netstateViewHolder.refreshNetworkStatus();
//            wireViewHolder.showEthernetInfo(false);
//            //  pppoeViewHolder.updatePppoeData(mConnectivityListener.getPPPoeStatusDescription());
//        }
    }

}