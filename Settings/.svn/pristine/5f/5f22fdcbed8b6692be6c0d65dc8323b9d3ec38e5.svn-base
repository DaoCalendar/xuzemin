
package com.ctv.settings.network.mcast;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.EthernetManager;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.ctv.settings.network.R;
import com.ctv.settings.network.activity.McastActivity;
import com.ctv.settings.network.utils.Constants;
import com.mstar.android.pppoe.PPPOE_STA;
import com.mstar.android.pppoe.PppoeManager;

public class DisplayTipDialog extends Dialog implements OnFocusChangeListener, OnClickListener {

    private static final String TAG = "display.TipDialog";

    private final Context ctvContext;

    private final McastActivity activity;

    private TextView tip_tv;

    private Button tip_ok_btn;

    private Button tip_cancle_btn;

    private String tip_str = "";

    private final WifiManager mWifiManager;

    private final PppoeManager mPPPoEManager;

    private EthernetManager mEthernetManager;
    private boolean isWifiOpened = false;

    public DisplayTipDialog(Context context) {
        super(context);
        this.ctvContext = context.getApplicationContext();
        this.activity = (McastActivity)context;
        mPPPoEManager = PppoeManager.getInstance(ctvContext);
        mWifiManager = (WifiManager) ctvContext.getSystemService(Context.WIFI_SERVICE);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.tip_dialog);
        Window w = getWindow();
        Resources resources = ctvContext.getResources();
        Drawable drawable = resources.getDrawable(R.drawable.transparency_bg);
        w.setBackgroundDrawable(drawable);
        drawable.setCallback(null);
        final float scale = resources.getDisplayMetrics().density;
        int width = (int) (949 * scale + 0.5f);
        int height = (int) (615 * scale + 0.5f);
        w.setLayout(width, height);
        w.setGravity(Gravity.CENTER);
        WindowManager.LayoutParams wl = w.getAttributes();
        w.setAttributes(wl);
        findViews();
    }

    /**
     * init compontent.
     */
    private void findViews() {
        tip_tv = (TextView) findViewById(R.id.tip_tv);
        tip_cancle_btn = (Button) findViewById(R.id.tip_cancle_btn);
        tip_ok_btn = (Button) findViewById(R.id.tip_ok_btn);

        tip_ok_btn.setOnFocusChangeListener(this);
        tip_cancle_btn.setOnFocusChangeListener(this);
        tip_ok_btn.setOnClickListener(this);
        tip_cancle_btn.setOnClickListener(this);
        tip_str = ctvContext.getString(R.string.display_tip_close) + "\n";
        tip_str = tip_str + "* " + ctvContext.getString(R.string.tip_open_wifi) + "\n";
        tip_str = tip_str + "* " + ctvContext.getString(R.string.please_hangup_pppoe) + "\n";
        tip_str = tip_str + "* " + ctvContext.getString(R.string.close_wifiap_txt) + "\n";
        tip_str = tip_str + "* " + ctvContext.getString(R.string.disconnect_ethernet) + "\n";
        tip_tv.setText(tip_str);
    }

    @Override
    public void onClick(View view) {
        int i = view.getId();
        if (i == R.id.tip_ok_btn) {// Close or Open
            setCloseOrOpen();
            dismiss();
        } else if (i == R.id.tip_cancle_btn) {
            dismiss();
        }
    }

    private void setCloseOrOpen() {
        Log.i(TAG, "setCloseOrOpen");
        // 1.Close PPPoE
        if (PPPOE_STA.DISCONNECTED != mPPPoEManager.PppoeGetStatus()) {
            Log.i(TAG, "---PPPoE ?");
            PppoeManager.getInstance(ctvContext).PppoeHangUp();
        }
        // 2.Close WiFi AP
        try {
            if(Constants.isWifiApEnabled(mWifiManager)){
                Constants.setWifiApEnabled(mWifiManager,null, false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
//        if (mWifiManager.isWifiApEnabled()) {
//            Log.i(TAG, "---WifiAp ?");
//            mWifiManager.setWifiApEnabled(null, false);
//        }
        // 3.Close Ethernet
        if (getEthernetManager().isEnabled()) {
            Log.i(TAG, "---Ethernet ?");
            getEthernetManager().setEnabled(false);
        }
        // 4.Open WiFi
        if (!mWifiManager.isWifiEnabled()) {
            mWifiManager.setWifiEnabled(true);
            isWifiOpened = false;
            Toast.makeText(ctvContext, ctvContext.getText(R.string.wifi_ap_submitting), Toast.LENGTH_SHORT).show();
        }else{
            isWifiOpened = true;
        }
        Message msg = new Message();
        msg.what = 0;
        msg.obj = (boolean)isWifiOpened;
        activity.getDisplayViewHolder().displayHandler.sendMessage(msg);

    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        switch (keyCode) {
            default:
                break;
            case KeyEvent.KEYCODE_BACK:
                dismiss();
                return true;

        }
        return false;
    }

    @Override
    public void onFocusChange(View view, boolean has_focus) {
        int i = view.getId();
        if (i == R.id.tip_ok_btn) {
            if (has_focus) {
                tip_ok_btn.setSelected(true);
            } else {
                tip_ok_btn.setSelected(false);
            }
        } else if (i == R.id.tip_cancle_btn) {
            if (has_focus) {
                tip_cancle_btn.setSelected(true);
            } else {
                tip_cancle_btn.setSelected(false);
            }
        }
    }

    @SuppressLint("WrongConstant")
    public EthernetManager getEthernetManager() {
        if (mEthernetManager == null) {
            mEthernetManager = (EthernetManager) ctvContext.getSystemService(Constants.ETHERNET_SERVICE);
        }
        return mEthernetManager;
    }

}
