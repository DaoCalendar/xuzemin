
package com.ctv.settings.network.mcast;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.NetworkInfo;
import android.net.wifi.p2p.WifiP2pDevice;
import android.net.wifi.p2p.WifiP2pDeviceList;
import android.net.wifi.p2p.WifiP2pInfo;
import android.net.wifi.p2p.WifiP2pManager;
import android.net.wifi.p2p.WifiP2pManager.PeerListListener;
import android.os.Parcel;
import android.os.UserHandle;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.Log;

import com.ctv.settings.network.utils.Constants;
import com.ctv.settings.utils.DataTool;
import com.cultraview.tv.utils.CtvCommonUtils;

import static com.ctv.settings.network.utils.Constants.*;

@SuppressLint("NewApi")
public class WifiP2p implements PeerListListener {
    private static final String TAG = "CtvWifiP2p";

    private final IntentFilter mIntentFilter;

    private WifiP2pManager mWifiP2pManager;

    private WifiP2pManager.Channel mChannel;

    private boolean mWifiP2pEnabled;

    private WifiP2pDeviceList mPeers = new WifiP2pDeviceList();

    private int mConnectedDevices;

    private boolean mLastGroupFormed = false;

    private WifiP2pDevice mThisDevice;

    private boolean mWifiP2pSearching;

    private Context mContext;

    private boolean isRegisted = false;

    public WifiP2p(Context context) throws Exception {
        this.mContext = context;
        mIntentFilter = new IntentFilter();
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION);
        mIntentFilter.addAction(WIFI_P2P_PERSISTENT_GROUPS_CHANGED_ACTION);
        mWifiP2pManager = (WifiP2pManager) mContext.getSystemService(Context.WIFI_P2P_SERVICE);
        if (mWifiP2pManager != null) {
            mChannel = mWifiP2pManager.initialize(mContext, mContext.getMainLooper(), null);
            if (mChannel == null) {
                // Failure to set up connection
                Log.i(TAG, "WifiP2p:Failed to set up connection with wifi p2p service");
                mWifiP2pManager = null;
            }
        } else {
            Log.e(TAG, "mWifiP2pManager is null !");
        }
        mContext.registerReceiver(mReceiver, mIntentFilter);
        isRegisted = true;
        String devicename = CtvCommonUtils.getCultraviewProjectInfo(mContext, "tbl_SoftwareVersion",
                "DeviceName");
        setMircDeviceName(devicename);
    }

    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {
                mWifiP2pEnabled = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE,
                        WifiP2pManager.WIFI_P2P_STATE_DISABLED) == WifiP2pManager.WIFI_P2P_STATE_ENABLED;
                Log.d(TAG, "WifiP2p Status = " + mWifiP2pEnabled);
            } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {
                mPeers = (WifiP2pDeviceList) intent
                        .getParcelableExtra(WifiP2pManager.EXTRA_P2P_DEVICE_LIST);
                handlePeersChanged();
            } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {
                if (mWifiP2pManager == null)
                    return;
                NetworkInfo networkInfo = (NetworkInfo) intent
                        .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);
                WifiP2pInfo wifip2pinfo = (WifiP2pInfo) intent
                        .getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_INFO);
                if (networkInfo.isConnected()) {
                    Log.d(TAG, "Connected");
                } else if (mLastGroupFormed != true) {
                    startSearch();
                }
                mLastGroupFormed = wifip2pinfo.groupFormed;
            } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {
                mThisDevice = (WifiP2pDevice) intent
                        .getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);
                String devicename = CtvCommonUtils.getCultraviewProjectInfo(mContext,
                        "tbl_SoftwareVersion", "DeviceName");
                Settings.Global.putString(mContext.getContentResolver(),
                        WIFI_P2P_DEVICE_NAME, devicename);
                Log.d(TAG, "Update device info: " + mThisDevice);
            } else if (WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION.equals(action)) {
                int discoveryState = intent.getIntExtra(WifiP2pManager.EXTRA_DISCOVERY_STATE,
                        WifiP2pManager.WIFI_P2P_DISCOVERY_STOPPED);
                Log.d(TAG, "Discovery state changed: " + discoveryState);
                if (discoveryState == WifiP2pManager.WIFI_P2P_DISCOVERY_STARTED) {
                    updateSearchMenu(true);
                } else {
                    updateSearchMenu(false);
                }
            } else if (WIFI_P2P_PERSISTENT_GROUPS_CHANGED_ACTION.equals(action)) {
            }
        }
    };

    private void handlePeersChanged() {
        mConnectedDevices = 0;
        Log.d(TAG, "List of available peers");
        for (WifiP2pDevice peer : mPeers.getDeviceList()) {
            Log.d(TAG, "-> " + peer);
            if (peer.status == WifiP2pDevice.CONNECTED)
                mConnectedDevices++;
        }
        Log.d(TAG, " mConnectedDevices " + mConnectedDevices);
    }

    @Override
    public void onPeersAvailable(WifiP2pDeviceList peers) {
        Log.d(TAG, "Requested peers are available");
        mPeers = peers;
        handlePeersChanged();
    }

    private void updateSearchMenu(boolean searching) {
        mWifiP2pSearching = searching;
    }

    private void startSearch() {
        if (mWifiP2pManager != null && !mWifiP2pSearching) {
            Log.i(TAG, "---startSearch====discoverPeers");
            mWifiP2pManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {
                public void onSuccess() {
                }

                public void onFailure(int reason) {
                    Log.d(TAG, " discover fail " + reason);
                }
            });
        }
    }

    public void exit() {
        Log.e(TAG, " exit stopPeerDiscovery !");
        if (mWifiP2pManager != null) {
            mWifiP2pManager.stopPeerDiscovery(mChannel, null);
        }
    }

    public void unregisterWifiHWReceiver() {
        if (isRegisted) {
            mContext.unregisterReceiver(mReceiver);
        }
    }

    public void enter() {
        Log.e(TAG, "CtvWifiP2p enter!");
        if (mWifiP2pManager != null) {
            mWifiP2pManager.requestPeers(mChannel, WifiP2p.this);
        }
    }

    @SuppressLint({"WrongConstant", "MissingPermission"})
    public String getMircDeviceName() {
        if (mThisDevice != null && TextUtils.isEmpty(mThisDevice.deviceName)) {
            return mThisDevice.deviceName;
        } else {
            String deviceName = Settings.Global.getString(mContext.getContentResolver(),
                    WIFI_P2P_DEVICE_NAME);
            if (deviceName == null) {
                deviceName = DataTool.getDeviceName(mContext);
                Settings.Global.putString(mContext.getContentResolver(),
                        WIFI_P2P_DEVICE_NAME, deviceName);
                Intent intent = new Intent(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);
                intent.addFlags(FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
                intent.putExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE, new WifiP2pDevice(
                        new WifiP2pDevice()));

                mContext.sendStickyBroadcastAsUser(intent,Constants.getUserHandle(-1));//new UserHandle(ALL));
            }
            return deviceName;
        }
    }

    public void setMircDeviceName(String mircDeviceName) throws Exception {
        if (mWifiP2pManager != null) {
            setDeviceName(mWifiP2pManager,mChannel,mircDeviceName,new WifiP2pManager.ActionListener() {
                public void onSuccess() {
                    Log.d(TAG, " device rename success");
                }

                public void onFailure(int reason) {
                    Log.i(TAG, "---rename failed!" + reason);
                }
            });
//            mWifiP2pManager.setDeviceName(mChannel, mircDeviceName,
//                    new WifiP2pManager.ActionListener() {
//                        public void onSuccess() {
//                            Log.d(TAG, " device rename success");
//                        }
//
//                        public void onFailure(int reason) {
//                            Log.i(TAG, "---rename failed!" + reason);
//                        }
//                    });
        }

    }
}
